#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <time.h>
#define V 100


void primsMST(int graph[V][V], int n) {
    int parent[V];
    int distance[V];
    int MST[V];

    for (int i = 0; i < n; i++) {
        distance[i] = INT_MAX;
        MST[i] = 0;
    }

    distance[0] = 0;
    parent[0] = -1;
    for (int count = 0; count < n - 1; count++) {
        int u = mindistance(distance, MST, n);
        MST[u] = 1;
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && MST[v] == 0 && graph[u][v] < distance[v]) {
                parent[v] = u;
                distance[v] = graph[u][v];
            }
        }
    }
    printf("Edge \tWeight\n");

    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);

    }

}



int mindistance(int distance[], int MST[], int n) {

    int min = INT_MAX, min_index;

    for (int v = 0; v < n; v++) {
        if (MST[v] == 0 && distance[v] < min) {
            min = distance[v];
            min_index = v;
        }
    }
}


int main() {
    int n;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    int graph[V][V];
    printf("Enter the adjacency matrix: ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {

            scanf("%d", &graph[i][j]);
        }
    }

    clock_t start, end;
    start = clock();
    primsMST(graph, n);
    end = clock();
    printf("Time taken to FIND MST: %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
    return 0;

}
